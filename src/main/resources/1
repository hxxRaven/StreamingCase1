val unit: Unit = lines.foreachPartition(partition =>
        partition.foreach(x => {
          //数据清洗-获取课程编号
          //143.87.98.55    2020-06-27 10:57:01     "GET /class/145.html HTTP/1.1"  500     https://www.so.com/s?p=Spark Streaming实战
          val infos = x.split("\t")
          // /class/145.html
          val url: String = infos(2).split(" ")(1)
          val courseId = 0
          if (url.startsWith("/class")) {
            // 145.html
            val courseIdHTML: String = url.split("/")(2)
            // 145
            val courseId: Int = courseIdHTML.substring(0, courseIdHTML.lastIndexOf(".")).toInt
          }
          ClickLog(infos(0), DateUtils.parse(infos(1)), courseId, infos(3).toInt, infos(4))
        })


val cleanlog: RDD[ClickLog] = lines.map(line => {
        //数据清洗-获取课程编号
        //143.87.98.55    2020-06-27 10:57:01     "GET /class/145.html HTTP/1.1"  500     https://www.so.com/s?p=Spark Streaming实战
        val infos = line.split("\t")
        // /class/145.html
        val url: String = infos(2).split(" ")(1)
        val courseId = 0
        if (url.startsWith("/class")) {
          // 145.html
          val courseIdHTML: String = url.split("/")(2)
          // 145
          val courseId: Int = courseIdHTML.substring(0, courseIdHTML.lastIndexOf(".")).toInt
        }
        ClickLog(infos(0), DateUtils.parse(infos(1)), courseId, infos(3).toInt, infos(4))
      }).filter(clicklog => clicklog.courseId != 0)
      print(cleanlog)


      kafkaStream.foreachRDD { kafkaRDD =>
            //只有KafkaRDD可以强转成HasOffsetRanges，并获取到偏移量
            offsetRanges = kafkaRDD.asInstanceOf[HasOffsetRanges].offsetRanges
            val lines: RDD[String] = kafkaRDD.map(_.value())
            //对RDD进行操作，触发Action
            lines.foreachPartition(partition =>
              partition.foreach(x => {
                //数据清洗-获取课程编号
                //143.87.98.55    2020-06-27 10:57:01     "GET /class/145.html HTTP/1.1"  500     https://www.so.com/s?p=Spark Streaming实战
                val infos = x.split("\t")
                // /class/145.html
                val url: String = infos(2).split(" ")(1)
                val courseId = 0
                if (url.startsWith("/class")) {
                  // 145.html
                  val courseIdHTML: String = url.split("/")(2)
                  // 145
                  val courseId: Int = courseIdHTML.substring(0, courseIdHTML.lastIndexOf(".")).toInt
                }
                ClickLog(infos(0), DateUtils.parse(infos(1)), courseId, infos(3).toInt, infos(4))
              })
            )
            kafkaStream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)
          }